import numpy as np
from algorithms.boostrap_mean_comparison import BootstrapMeanComparison

resnet_thin_baseline = np.array([70.01, 69.80, 70.38, 70.10, 69.87])
resnet_thick_baseline = np.array([74.67, 74.51, 74.62, 73.99, 74.98])
resnet_random_routing_baseline = np.array([68.82, 69.12, 69.26, 68.71, 68.56])
resnet_all_paths_baseline = np.array([71.18, 71.34, 70.98, 71.12, 71.08])
resnet_with_no_annealing = np.array([72.16, 72.02, 72.24, 72.01, 72.16])
resnet_with_annealing = np.array([72.86, 73.16, 72.68, 72.61, 72.89])
resnet_smoe_cign_v1 = 100.0 * np.array(
    [0.7366, 0.7355, 0.737, 0.7365, 0.7384, 0.7398, 0.7388, 0.7397, 0.7388, 0.7393, 0.739, 0.7374, 0.7406, 0.7381,
     0.7358, 0.7388, 0.7392, 0.7382, 0.7394, 0.7387, 0.7364, 0.7372, 0.7365, 0.7378, 0.7372, 0.7389, 0.735, 0.7392,
     0.738, 0.7381, 0.7385, 0.7349, 0.7379, 0.7357, 0.7382, 0.7356, 0.739, 0.7375, 0.7364, 0.7359, 0.7385, 0.7378,
     0.7386, 0.7372, 0.7363, 0.7368, 0.7365, 0.7385, 0.7355, 0.7381, 0.7365, 0.7367, 0.7371, 0.7349, 0.7364, 0.7368,
     0.7357, 0.7362, 0.736, 0.7383, 0.7374, 0.7366, 0.7389, 0.7387, 0.7383, 0.7377, 0.7386, 0.7398, 0.7407, 0.7375,
     0.7394, 0.7357, 0.7377, 0.7377, 0.7379, 0.7373, 0.7378, 0.7381, 0.7378, 0.7382, 0.7374, 0.7379, 0.738, 0.7376,
     0.7385, 0.7397, 0.7382, 0.7403, 0.7374, 0.7373, 0.7369, 0.7356, 0.7346, 0.7384, 0.7346, 0.7368, 0.735, 0.7371,
     0.7377, 0.737, 0.7345, 0.7351, 0.7345, 0.7356, 0.7352, 0.7344, 0.7332, 0.736, 0.7341, 0.7348, 0.734, 0.7327,
     0.7347, 0.735, 0.7335, 0.7349, 0.7342, 0.734, 0.7334, 0.7347, 0.7347, 0.7349, 0.7348, 0.7347, 0.735, 0.7332, 0.734,
     0.7342, 0.7342, 0.7348, 0.7345, 0.7334, 0.7332, 0.7337, 0.7329, 0.735, 0.7335, 0.7347, 0.7338, 0.7332, 0.7342,
     0.7349, 0.7354, 0.734, 0.7343, 0.7329, 0.733, 0.7334, 0.7344, 0.7352, 0.7343, 0.7337, 0.7343, 0.7344, 0.7344,
     0.7342, 0.7324, 0.7343, 0.7334, 0.7339, 0.7335, 0.7356, 0.7343, 0.7338, 0.7334, 0.7342, 0.7346, 0.7345, 0.7346,
     0.7304, 0.7341, 0.736, 0.7345, 0.7334, 0.7354, 0.7342, 0.7334, 0.7332, 0.7337, 0.733, 0.7346, 0.7326, 0.735,
     0.7345, 0.7333, 0.7335, 0.7336, 0.7323, 0.7339, 0.7329, 0.7336, 0.7339, 0.7341, 0.7351, 0.7333, 0.7319, 0.7338,
     0.7307, 0.734, 0.7338, 0.7378, 0.7378, 0.7406, 0.7395, 0.7361, 0.7375, 0.7396, 0.7392, 0.7366, 0.7374, 0.7387,
     0.739, 0.7388, 0.7395, 0.7373, 0.7382, 0.7376, 0.7387, 0.7376, 0.7372, 0.7372, 0.736, 0.7363, 0.7377, 0.7383,
     0.738, 0.7349, 0.7364, 0.7373, 0.7397, 0.7392, 0.7364, 0.7366, 0.7334, 0.7371, 0.7362, 0.7365, 0.7362, 0.7362,
     0.7373, 0.7353, 0.7357, 0.7362, 0.7349, 0.7344, 0.7362, 0.7352, 0.7353, 0.7357, 0.7379, 0.735, 0.7356, 0.7372,
     0.7358, 0.7348, 0.7368, 0.736, 0.7339, 0.7382, 0.7384, 0.7362, 0.7381, 0.7375, 0.7361, 0.7367, 0.7372, 0.7362,
     0.7336, 0.7366, 0.7366, 0.7373, 0.7368, 0.7373, 0.7383, 0.7362, 0.7362, 0.7366, 0.7364, 0.7373, 0.736, 0.7373,
     0.738, 0.7362, 0.7363, 0.737, 0.7359, 0.736, 0.7382, 0.7366, 0.7355, 0.7381, 0.7388, 0.7367, 0.7346, 0.738, 0.7347,
     0.736, 0.7369, 0.7384, 0.7353, 0.7367, 0.7368, 0.7368, 0.7353, 0.736, 0.7366, 0.736, 0.7341, 0.7367, 0.7332,
     0.7346, 0.7355, 0.7348, 0.7363, 0.7372, 0.7365, 0.7362, 0.7357, 0.7331, 0.7353, 0.7356, 0.7362, 0.7361, 0.7355,
     0.7347, 0.7361, 0.7358, 0.7354, 0.7366, 0.7356, 0.738, 0.7359, 0.7355, 0.7363, 0.7369, 0.7336, 0.7364, 0.7374,
     0.7381, 0.737, 0.7373, 0.7367, 0.7366, 0.7372, 0.7365, 0.7367, 0.7375, 0.7377, 0.7356, 0.7366, 0.7372, 0.7359,
     0.7371, 0.7373, 0.7362, 0.7359, 0.7375, 0.7385, 0.7369, 0.7364, 0.7391, 0.7388, 0.7382, 0.7355, 0.7377, 0.7364,
     0.7362, 0.7374, 0.7373, 0.7374, 0.7386, 0.7382, 0.7367, 0.7374, 0.738, 0.7367, 0.7374, 0.7361, 0.7372, 0.7388,
     0.737, 0.7359, 0.7365, 0.7383, 0.7388, 0.738, 0.739, 0.7369, 0.7379, 0.739, 0.7382, 0.7367, 0.7392, 0.7368, 0.7368,
     0.7388, 0.7389, 0.7364, 0.7384, 0.7386])
resnet_smoe_cign_v2 = 100.0 * np.array(
    [0.7373, 0.7377, 0.7372, 0.7376, 0.7388, 0.739, 0.7382, 0.7386, 0.7373, 0.7367, 0.7376, 0.7368, 0.7384, 0.7375,
     0.7376, 0.7375, 0.738, 0.7387, 0.7374, 0.7385, 0.7381, 0.7361, 0.7381, 0.7363, 0.7383, 0.7379, 0.7363, 0.7383,
     0.7376, 0.7375, 0.7404, 0.7385, 0.7373, 0.7374, 0.7383, 0.7377, 0.7371, 0.7368, 0.7353, 0.7376, 0.7357, 0.7372,
     0.7379, 0.7362, 0.7395, 0.7349, 0.7351, 0.7352, 0.7375, 0.737, 0.7367, 0.7359, 0.738, 0.7369, 0.7362, 0.7367,
     0.7377, 0.7354, 0.7369, 0.7387, 0.7378, 0.7395, 0.7394, 0.7366, 0.7404, 0.7374, 0.7398, 0.7387, 0.7369, 0.7368,
     0.7372, 0.7396, 0.7373, 0.7359, 0.7383, 0.7364, 0.7373, 0.7388, 0.7386, 0.737, 0.7359, 0.7375, 0.7375, 0.7346,
     0.7369, 0.7392, 0.7403, 0.7354, 0.7378, 0.736, 0.7356, 0.7376, 0.7383, 0.7366, 0.7364, 0.7363, 0.7368, 0.7387,
     0.7342, 0.7362, 0.7331, 0.7341, 0.7346, 0.7345, 0.7353, 0.7335, 0.7328, 0.7324, 0.7344, 0.7333, 0.7341, 0.7343,
     0.7339, 0.7334, 0.7334, 0.7348, 0.7326, 0.7331, 0.7337, 0.7352, 0.7332, 0.7338, 0.7335, 0.7338, 0.7338, 0.7343,
     0.7333, 0.7341, 0.7334, 0.7345, 0.734, 0.7342, 0.7337, 0.7351, 0.7335, 0.7335, 0.733, 0.733, 0.7331, 0.7337,
     0.7355, 0.7336, 0.7339, 0.7342, 0.7337, 0.7339, 0.7332, 0.7315, 0.7344, 0.7355, 0.735, 0.7337, 0.7345, 0.7325,
     0.7335, 0.7332, 0.7337, 0.7333, 0.7338, 0.7327, 0.7342, 0.7345, 0.7345, 0.734, 0.7323, 0.7343, 0.7349, 0.7351,
     0.7329, 0.7334, 0.7337, 0.7337, 0.7338, 0.7334, 0.7337, 0.7329, 0.7326, 0.7341, 0.7338, 0.735, 0.7335, 0.7339,
     0.733, 0.7333, 0.7336, 0.7339, 0.7343, 0.7332, 0.7334, 0.733, 0.7327, 0.7339, 0.7338, 0.7336, 0.7342, 0.7343,
     0.7333, 0.7329, 0.7337, 0.7336, 0.737, 0.7393, 0.7368, 0.7369, 0.7381, 0.741, 0.7399, 0.737, 0.7387, 0.7403,
     0.7378, 0.7378, 0.7407, 0.7374, 0.7361, 0.7375, 0.7383, 0.7382, 0.7372, 0.7381, 0.7389, 0.7369, 0.7382, 0.7345,
     0.737, 0.7367, 0.7367, 0.7352, 0.7394, 0.7396, 0.7369, 0.7361, 0.7374, 0.7359, 0.7367, 0.7353, 0.7363, 0.7355,
     0.737, 0.7365, 0.7343, 0.7352, 0.7355, 0.7351, 0.7353, 0.734, 0.7331, 0.7377, 0.736, 0.7343, 0.7377, 0.7364,
     0.7351, 0.7352, 0.7362, 0.7354, 0.7352, 0.7348, 0.7351, 0.7341, 0.735, 0.7372, 0.7376, 0.7369, 0.7353, 0.7356,
     0.737, 0.7378, 0.7379, 0.7355, 0.7383, 0.7365, 0.7376, 0.7368, 0.7374, 0.7373, 0.7379, 0.7364, 0.7379, 0.7377,
     0.7365, 0.7366, 0.7356, 0.7365, 0.7376, 0.7368, 0.7366, 0.7376, 0.7355, 0.7364, 0.7377, 0.7345, 0.7362, 0.736,
     0.7357, 0.7381, 0.7374, 0.736, 0.7353, 0.736, 0.7374, 0.7347, 0.7369, 0.7343, 0.7355, 0.7354, 0.7362, 0.7351,
     0.7341, 0.7359, 0.7369, 0.7339, 0.7368, 0.7353, 0.7353, 0.7345, 0.7357, 0.7356, 0.7373, 0.7333, 0.7344, 0.7355,
     0.7357, 0.7362, 0.7364, 0.7359, 0.7372, 0.7366, 0.7373, 0.7369, 0.7365, 0.7361, 0.7359, 0.7354, 0.735, 0.7346,
     0.7344, 0.7338, 0.7365, 0.7352, 0.7375, 0.7356, 0.7381, 0.738, 0.7358, 0.7371, 0.7359, 0.7378, 0.7375, 0.7364,
     0.7353, 0.7364, 0.7371, 0.7368, 0.7346, 0.7352, 0.7349, 0.7361, 0.737, 0.7378, 0.7352, 0.7373, 0.7374, 0.7368,
     0.7369, 0.7381, 0.7362, 0.7364, 0.7383, 0.7375, 0.7358, 0.7368, 0.7368, 0.7358, 0.7346, 0.7363, 0.7364, 0.7354,
     0.7376, 0.7364, 0.7361, 0.7389, 0.7349, 0.7358, 0.7399, 0.7387, 0.7367, 0.7372, 0.7351, 0.7379, 0.7373, 0.7388,
     0.7378, 0.7363, 0.7385, 0.7394, 0.7381, 0.7364, 0.7394, 0.7376])
resnet_smoe_cign_v3 = 100.0 * np.array(
    [0.7351, 0.738, 0.7364, 0.7379, 0.7365, 0.7367, 0.7347, 0.7388, 0.7376, 0.7341, 0.7384, 0.7365, 0.736, 0.7362,
     0.7361, 0.7371, 0.7325, 0.7357, 0.7348, 0.7341, 0.7375, 0.7344, 0.7353, 0.7364, 0.7345, 0.7363, 0.7339, 0.7367,
     0.7335, 0.7396, 0.7347, 0.7385, 0.7355, 0.7345, 0.7351, 0.7364, 0.7391, 0.7348, 0.7374, 0.738, 0.7367, 0.735,
     0.7366, 0.7344, 0.7357, 0.738, 0.7371, 0.7368, 0.7349, 0.7362, 0.7364, 0.738, 0.7347, 0.7366, 0.7381, 0.7355,
     0.734, 0.7363, 0.7347, 0.731, 0.7384, 0.7368, 0.7379, 0.7357, 0.7367, 0.7412, 0.7367, 0.7382, 0.7386, 0.7385,
     0.7373, 0.7375, 0.7354, 0.7364, 0.7355, 0.7352, 0.7365, 0.7361, 0.7396, 0.7343, 0.735, 0.7391, 0.7349, 0.7386,
     0.734, 0.7371, 0.7398, 0.7385, 0.7369, 0.7344, 0.7381, 0.7339, 0.7355, 0.7362, 0.7355, 0.7352, 0.7358, 0.7356,
     0.7365, 0.7358, 0.7337, 0.7342, 0.734, 0.7349, 0.733, 0.7331, 0.7328, 0.7312, 0.7333, 0.7308, 0.7347, 0.732,
     0.7336, 0.7328, 0.7332, 0.7326, 0.7343, 0.734, 0.7339, 0.7332, 0.731, 0.7335, 0.7337, 0.734, 0.7324, 0.7326,
     0.7331, 0.7349, 0.734, 0.733, 0.7332, 0.7323, 0.7334, 0.7326, 0.7321, 0.7333, 0.7319, 0.7322, 0.7328, 0.7328,
     0.7344, 0.7339, 0.7315, 0.7336, 0.732, 0.7332, 0.7315, 0.7325, 0.7334, 0.7324, 0.734, 0.7339, 0.7345, 0.7338,
     0.7339, 0.7331, 0.7323, 0.7337, 0.734, 0.7341, 0.7328, 0.7333, 0.733, 0.7327, 0.7332, 0.7344, 0.7328, 0.7335,
     0.7325, 0.7308, 0.7333, 0.7337, 0.7331, 0.7318, 0.7342, 0.733, 0.7315, 0.7323, 0.7338, 0.7325, 0.734, 0.7322,
     0.734, 0.7319, 0.7321, 0.7323, 0.7318, 0.7326, 0.7317, 0.7307, 0.7299, 0.733, 0.735, 0.7338, 0.7325, 0.7331,
     0.7322, 0.7332, 0.7315, 0.7331, 0.7374, 0.7334, 0.7374, 0.7373, 0.7365, 0.7357, 0.7368, 0.7386, 0.7311, 0.7325,
     0.7384, 0.7399, 0.7369, 0.735, 0.7396, 0.7336, 0.7332, 0.7369, 0.7396, 0.7352, 0.7337, 0.7351, 0.7356, 0.7358,
     0.7335, 0.7356, 0.7332, 0.7343, 0.7378, 0.7386, 0.739, 0.7355, 0.7346, 0.7334, 0.7344, 0.7318, 0.7341, 0.7371,
     0.7358, 0.7315, 0.732, 0.7292, 0.7365, 0.7341, 0.7316, 0.7312, 0.7339, 0.7323, 0.7333, 0.7359, 0.7337, 0.7343,
     0.7329, 0.7332, 0.7313, 0.7328, 0.7368, 0.7318, 0.7363, 0.7355, 0.7362, 0.7363, 0.7359, 0.7354, 0.7354, 0.734,
     0.735, 0.7339, 0.735, 0.7381, 0.7373, 0.7374, 0.738, 0.7316, 0.7378, 0.7361, 0.736, 0.7374, 0.7371, 0.7366, 0.7342,
     0.735, 0.7369, 0.7353, 0.7355, 0.7352, 0.7365, 0.7369, 0.7342, 0.7347, 0.7364, 0.7364, 0.7359, 0.7347, 0.7356,
     0.7354, 0.7367, 0.7364, 0.7373, 0.7355, 0.7381, 0.736, 0.7338, 0.7343, 0.7368, 0.7337, 0.7312, 0.7353, 0.7334,
     0.7331, 0.7332, 0.7346, 0.7347, 0.7356, 0.7353, 0.7371, 0.7334, 0.7356, 0.7377, 0.735, 0.7356, 0.7344, 0.7344,
     0.7367, 0.737, 0.7344, 0.7356, 0.7349, 0.7357, 0.7371, 0.735, 0.7346, 0.7349, 0.7355, 0.7343, 0.7344, 0.735,
     0.7344, 0.7351, 0.7357, 0.7372, 0.7384, 0.7362, 0.737, 0.7349, 0.7366, 0.7376, 0.7363, 0.7373, 0.7361, 0.7348,
     0.7364, 0.7359, 0.7364, 0.7369, 0.7349, 0.7362, 0.74, 0.7355, 0.7362, 0.7377, 0.7355, 0.7358, 0.7336, 0.7362,
     0.7337, 0.7358, 0.7388, 0.7359, 0.7374, 0.7371, 0.7373, 0.736, 0.738, 0.7354, 0.734, 0.738, 0.735, 0.7345, 0.7359,
     0.7373, 0.7349, 0.7352, 0.7334, 0.7378, 0.7378, 0.7384, 0.74, 0.7352, 0.7375, 0.736, 0.7372, 0.7394, 0.7362, 0.74,
     0.737, 0.7355, 0.7369, 0.7392, 0.7355])

print(np.mean(resnet_thin_baseline))
print(np.mean(resnet_thick_baseline))
print(np.mean(resnet_random_routing_baseline))
print(np.mean(resnet_all_paths_baseline))
print(np.mean(resnet_with_no_annealing))
print(np.mean(resnet_with_annealing))
print(np.mean(resnet_smoe_cign_v1))
print(np.mean(resnet_smoe_cign_v2))
print(np.mean(resnet_smoe_cign_v3))

data_samples = {"resnet_thin_baseline": resnet_thin_baseline,
                "resnet_thick_baseline": resnet_thick_baseline,
                "resnet_random_routing_baseline": resnet_random_routing_baseline,
                "resnet_all_paths_baseline": resnet_all_paths_baseline,
                "resnet_with_no_annealing": resnet_with_no_annealing,
                "resnet_with_annealing": resnet_with_annealing,
                "resnet_smoe_cign_v1": resnet_smoe_cign_v1,
                "resnet_smoe_cign_v2": resnet_smoe_cign_v2,
                "resnet_smoe_cign_v3": resnet_smoe_cign_v3}

baselines = ["resnet_thin_baseline", "resnet_thick_baseline", "resnet_random_routing_baseline",
             "resnet_all_paths_baseline"]
cigns = ["resnet_with_no_annealing", "resnet_with_annealing", "resnet_smoe_cign_v1", "resnet_smoe_cign_v2",
         "resnet_smoe_cign_v3"]

for cign_method in cigns:
    print("**********CIGN method:{0}**********".format(cign_method))
    for baseline_method in baselines:
        print("Comparing {0} vs {1}".format(cign_method, baseline_method))
        cign_arr = data_samples[cign_method]
        baseline_arr = data_samples[baseline_method]
        p_value, reject_null_hypothesis = BootstrapMeanComparison.compare(x=cign_arr, y=baseline_arr,
                                                                          boostrap_count=10000)
        print("p-value:{0} Reject H0 for equal means:{1}".format(p_value, reject_null_hypothesis))

x = np.random.uniform(low=0.0, high=10.0, size=(1000,))
y = np.random.uniform(low=20.0, high=40.0, size=(1250,))

p_value, reject_null_hypothesis = BootstrapMeanComparison.compare(x=x, y=y, boostrap_count=10000)
