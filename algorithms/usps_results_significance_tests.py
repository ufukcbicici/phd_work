import numpy as np
from algorithms.boostrap_mean_comparison import BootstrapMeanComparison

# usps_thin_baseline = 100.0 * np.array(
#     [0.942733765, 0.942202292, 0.940308919, 0.940209268, 0.940209268, 0.940209268, 0.939644577, 0.939312407,
#      0.939245972, 0.939245972, 0.939212755, 0.939179538, 0.939079887, 0.938614848, 0.938282677, 0.938183026,
#      0.938149809, 0.937983724, 0.937717987, 0.937551902, 0.937518685, 0.937286165, 0.937252948, 0.937219731,
#      0.937186514, 0.937020429, 0.93688756, 0.936854343, ])
# usps_thick_baseline = 100.0 * np.array(
#     [0.946188341, 0.946188341, 0.945955821, 0.945690085, 0.945656868, 0.945191829, 0.944992526, 0.944959309,
#      0.944760007, 0.944693572, 0.944627138, 0.944527487, 0.94449427, 0.944195316, 0.944195316, 0.944195316, 0.943796712,
#      0.943796712, 0.943730277, 0.943630626, 0.943630626, 0.943597409, 0.943564192, 0.943530975, 0.943431324, ])
# usps_random_routing_baseline = 100.0 * np.array(
#     [0.943697060288988, 0.943630626141837, 0.9431323700382, 0.942766982228866, 0.942700548081714, 0.942667331008138,
#      0.942634113934562, 0.942600896860987, 0.942468028566683, 0.942368377345956, 0.942135857830925, 0.941637601727288,
#      0.941604384653712, 0.941604384653712, 0.941537950506561, 0.941471516359409, 0.941371865138681, 0.941272213917954,
#      0.941272213917954, 0.941238996844378, 0.941039694402923, 0.940940043182196, 0.940840391961469, 0.940740740740741,
#      0.940607872446438, 0.940043182195648, 0.939877096827769, 0.939644577312739, 0.939578143165587, 0.939544926092011])
# resnet_all_paths_baseline = np.array([71.18, 71.34, 70.98, 71.12, 71.08])
# resnet_with_no_annealing = np.array([72.16, 72.02, 72.24, 72.01, 72.16])
# usps_with_annealing = 100.0 * np.array([
#     0.946188340807175, 0.945690084703538, 0.944693572496263, 0.944693572496263,
#     0.944693572496263, 0.944693572496263, 0.944195316392626, 0.944195316392626,
#     0.944195316392626, 0.944195316392626, 0.943697060288989, 0.943697060288989,
#     0.943697060288989, 0.943697060288989, 0.943697060288989, 0.943697060288989,
#     0.943198804185351, 0.943198804185351, 0.943198804185351, 0.943198804185351,
#     0.943198804185351, 0.943198804185351, 0.943198804185351, 0.943198804185351,
#     0.943198804185351, 0.943198804185351, 0.943198804185351, 0.942700548081714,
#     0.942700548081714, 0.942700548081714, 0.942700548081714, 0.942700548081714,
#     0.942700548081714, 0.942700548081714, 0.942700548081714, 0.942700548081714,
#     0.942700548081714, 0.942700548081714, 0.942700548081714, 0.942700548081714,
#     0.942700548081714, 0.942700548081714, 0.942700548081714, 0.942700548081714,
#     0.942700548081714, 0.942700548081714, 0.942700548081714, 0.942700548081714,
#     0.942700548081714, 0.942700548081714, 0.942700548081714, 0.942700548081714,
#     0.942202291978077, 0.942202291978077, 0.942202291978077, 0.942202291978077,
#     0.942202291978077, 0.942202291978077, 0.942202291978077, 0.942202291978077,
#     0.942202291978077, 0.942202291978077, 0.942202291978077, 0.942202291978077,
#     0.942202291978077, 0.941704035874439, 0.941704035874439, 0.941704035874439,
#     0.941704035874439, 0.941704035874439, 0.941704035874439, 0.941704035874439,
#     0.941704035874439, 0.941205779770802, 0.941205779770802])

usps_thin_baseline = 100.0 * np.array(
    [0.945889387, 0.942733765, 0.940308919, 0.940209268, 0.939644577, 0.939245972, 0.939212755, 0.939079887,
     0.938282677, 0.938149809])

usps_thick_baseline = 100.0 * np.array(
    [0.946188341, 0.945955821, 0.945656868, 0.945191829, 0.944959309, 0.944892875, 0.944760007, 0.944627138, 0.94449427,
     0.944195316])

usps_random_routing_baseline = 100.0 * np.array(
    [0.94369706, 0.94313237, 0.942700548, 0.942634114, 0.942468029, 0.942135858, 0.941604385, 0.941537951, 0.941371865,
     0.941272214])

usps_all_paths_baseline = 100.0 * np.array(
    [0.945656868, 0.944261751, 0.943099153, 0.942368377, 0.941438299, 0.94097326, 0.940707524, 0.940508221, 0.939445275,
     0.93904667])

usps_with_annealing = 100.0 * np.array([0.94416209931905,
                                        0.943398107,
                                        0.943232021,
                                        0.943165587,
                                        0.942833416,
                                        0.942667331008138,
                                        0.942169075,
                                        0.942135857830925,
                                        0.941670818800864,
                                        0.941537951
                                        ])

usps_smoe_cign = 100.0 * np.array(
    [0.948270083, 0.9479349, 0.947748687, 0.947674202, 0.94763696, 0.947450747, 0.947301776, 0.947301776, 0.947227291,
     0.947190049, 0.947190049, 0.947115564, 0.947078321, 0.947041079, 0.946966593, 0.946892108, 0.946892108,
     0.946854866, 0.946854866, 0.946817623, 0.946780381, 0.946705895, 0.946668653, 0.946668653, 0.94663141, 0.946594168,
     0.946594168, 0.946556925, 0.946519683, 0.94648244, 0.946445198, 0.946445198, 0.946370712, 0.946370712, 0.9461845,
     0.9461845, 0.946072772, 0.946035529, 0.946035529, 0.945998287, 0.945923802, 0.945923802, 0.945886559, 0.945849317,
     0.945849317, 0.945812074, 0.945812074, 0.945774831, 0.945700346, 0.945700346, 0.945663104, 0.945625861,
     0.945588619, 0.945588619, 0.945551376, 0.945514134, 0.945476891, 0.945476891, 0.945439648, 0.945402406,
     0.945327921, 0.945290678, 0.945253436, 0.945253436, 0.945216193, 0.945216193, 0.945178951, 0.945141708,
     0.945141708, 0.945141708, 0.945104465, 0.945104465, 0.945067223, 0.94502998, 0.94502998, 0.944992738, 0.944955495,
     0.944918253, 0.944806525, 0.944806525, 0.944769282, 0.94473204, 0.94473204, 0.944694797, 0.944620312, 0.944620312,
     0.944471342, 0.944396857, 0.944396857, 0.944359614, 0.944359614, 0.944322372, 0.944322372, 0.944247886,
     0.944247886, 0.944210644, 0.944098916, 0.944098916, 0.944024431, 0.943949946, ])

print("usps_thin_baseline:{0}".format(np.mean(usps_thin_baseline)))
print("usps_thick_baseline:{0}".format(np.mean(usps_thick_baseline)))
print("usps_random_routing_baseline:{0}".format(np.mean(usps_random_routing_baseline)))
print("usps_all_paths_baseline:{0}".format(np.mean(usps_all_paths_baseline)))
print("usps_with_annealing:{0}".format(np.mean(usps_with_annealing)))
print("usps_smoe_cign:{0}".format(np.mean(usps_smoe_cign)))

# data_samples = {"usps_thin_baseline": usps_thin_baseline,
#                 "usps_thick_baseline": usps_thick_baseline,
#                 "resnet_random_routing_baseline": resnet_random_routing_baseline,
#                 "resnet_all_paths_baseline": resnet_all_paths_baseline,
#                 "resnet_with_no_annealing": resnet_with_no_annealing,
#                 "resnet_with_annealing": resnet_with_annealing,
#                 "resnet_smoe_cign_v1": resnet_smoe_cign_v1,
#                 "resnet_smoe_cign_v2": resnet_smoe_cign_v2,
#                 "resnet_smoe_cign_v3": resnet_smoe_cign_v3}

data_samples = {"usps_thin_baseline": usps_thin_baseline,
                "usps_thick_baseline": usps_thick_baseline,
                "usps_random_routing_baseline": usps_random_routing_baseline,
                "usps_all_paths_baseline": usps_all_paths_baseline,
                "usps_with_annealing": usps_with_annealing,
                "usps_smoe_cign": usps_smoe_cign}

baselines = ["usps_thin_baseline", "usps_thick_baseline", "usps_random_routing_baseline",
             "usps_random_routing_baseline"]
cigns = ["usps_with_annealing", "usps_smoe_cign"]

for cign_method in cigns:
    print("**********CIGN method:{0}**********".format(cign_method))
    for baseline_method in baselines:
        print("Comparing {0} vs {1}".format(cign_method, baseline_method))
        cign_arr = data_samples[cign_method]
        baseline_arr = data_samples[baseline_method]
        p_value, reject_null_hypothesis = BootstrapMeanComparison.compare(x=cign_arr, y=baseline_arr,
                                                                          boostrap_count=10000)
        print("p-value:{0} Reject H0 for equal means:{1}".format(p_value, reject_null_hypothesis))

# x = np.random.uniform(low=0.0, high=10.0, size=(1000,))
# y = np.random.uniform(low=20.0, high=40.0, size=(1250,))
#
# p_value, reject_null_hypothesis = BootstrapMeanComparison.compare(x=x, y=y, boostrap_count=10000)
