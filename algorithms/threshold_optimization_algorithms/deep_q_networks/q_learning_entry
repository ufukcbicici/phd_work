import tensorflow as tf
import numpy as np
import time

from algorithms.threshold_optimization_algorithms.deep_q_networks.q_learning_threshold_optimizer import \
    QLearningThresholdOptimizer
from simple_tf.cign.fast_tree import FastTreeNetwork


def train_basic_q_learning():
    network_id = 452
    network_name = "FashionNet_Lite"
    iteration = 47520

    output_names = ["activations", "branch_probs", "label_tensor", "posterior_probs", "branching_feature",
                    "pre_branch_feature"]
    used_output_names = ["pre_branch_feature"]
    network = FastTreeNetwork.get_mock_tree(degree_list=[2, 2], network_name=network_name)
    routing_data = network.load_routing_info(run_id=network_id, iteration=iteration, data_type="test",
                                             output_names=output_names)
    validation_data, test_data = routing_data.apply_validation_test_split(test_ratio=0.1)
    q_learning_threshold_optimizer = QLearningThresholdOptimizer(
        validation_data=validation_data,
        test_data=test_data, network=network, network_name=network_name, run_id=network_id, lambda_mac_cost=0.0,
        q_learning_func="cnn", used_feature_names=used_output_names)
    print("X")


def main():
    # compare_gpu_implementation()
    train_basic_q_learning()


if __name__ == "__main__":
    main()
